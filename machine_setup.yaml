default_shell: "zsh"

tasks:
  wsl_config:
    symlink:
      src: "./etc/wsl.conf"
      target: "/etc/wsl.conf"

  windows_terminal:
    symlink:
      src: "./terminal"
      target: "/c/Users/Timo/AppData/Local/Packages/Microsoft.WindowsTerminalPreview_8wekyb3d8bbwe/LocalState"

  tools:
    run:
      commands:
        - "sudo apt-get update && sudo apt-get upgrade -y"
        - "sudo apt-get install -y ripgrep fd-find unzip apt-transport-https lsb-release ca-certificates wget software-properties-common keychain xclip"

  zsh:
    run:
      commands:
        - "sudo apt-get update"
        - "sudo apt-get install -y zsh"
        - 'sudo chsh -s "$(command -v zsh)" "${USER}"'

  omz:
    run:
      env:
        ZSH: ""
      commands:
        - "wget -O /tmp/install-omz.sh https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh"
        - "chmod u+x /tmp/install-omz.sh"
        - "/tmp/install-omz.sh"
        - "rm /tmp/install-omz.sh"

  zsh_theme:
    clone:
      url: "https://github.com/romkatv/powerlevel10k.git"
      target: "~/.oh-my-zsh/custom/themes/powerlevel10k"

  zsh_syntax_highlight:
    clone:
      url: "https://github.com/zsh-users/zsh-syntax-highlighting.git"
      target: "~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"

  zsh_auto_suggest:
    clone:
      url: "https://github.com/zsh-users/zsh-autosuggestions"
      target: "~/.oh-my-zsh/custom/plugins/zsh-autosuggestions"

  dotfiles:
    symlink:
      src: "./home"
      target: "~"

  neovim:
    run:
      commands:
        install:
          - "mkdir -p ~/.nvim"
          - "curl -L https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage -o ~/.nvim/nvim.appimage"
          - "chmod u+x ~/.nvim/nvim.appimage"
        update:
          - "curl -L https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage -o ~/.nvim/nvim.appimage"
          - "chmod u+x ~/.nvim/nvim.appimage"

  plug:
    run: 
      commands: 'sh -c ''curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'''

  rust:
    run:
      commands:
        install:
          - "sudo apt-get update"
          - "sudo apt-get install -y rustc"
          - "rustup default nightly"
        update:
          - "rustup update"

  rust_analyzer:
    run:
      commands:
        - "mkdir -p ~/.local/bin"
        - "curl -L https://github.com/rust-analyzer/rust-analyzer/releases/latest/download/rust-analyzer-x86_64-unknown-linux-gnu.gz | gunzip -c - > ~/.local/bin/rust-analyzer"
        - "chmod +x ~/.local/bin/rust-analyzer"

  brew:
    run:
      commands:
        - "wget -O /tmp/install-brew.sh https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh"
        - "chmod u+x /tmp/install-brew.sh"
        - "/tmp/install-brew.sh"
        - "rm /tmp/install-brew.sh"
        - 'rm -rf "/home/linuxbrew/.linuxbrew/Homebrew/Library/Taps/homebrew/homebrew-core"'
        - "brew tap homebrew/core"

  vim-markdown:
    run: 
      commands: "brew install glow"

  node:
    run:
      env:
        NVM_DIR: "~/.nvm"
        NODE_VERSION: "17"
      commands:
        install:
          - "mkdir -p $NVM_DIR"
          - "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash"
        update:
          - "nvm install node --reinstall-packages-from=node"
        uninstall:
          - "nvm uninstall $NODE_VERSION"
          - "rm -rf $NVM_DIR"

  yarn:
    run:
      commands:
        install:
          - "curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -"
          - "echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list"
          - "sudo apt-get update"
          - "sudo apt-get install --no-install-recommends yarn"

  prettier:
    run:
      commands:
        install: "npm install -g neovim prettier @fsouza/prettierd"
        update: "npm upgrade -g neovim prettier @fsouza/prettierd"
        uninstall: "npm uninstall -g neovim prettier @fsouza/prettierd"

  octo:
    run:
      commands:
        - "curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg"
        - 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null'
        - "sudo apt-get update && sudo apt-get install -y gh ripgrep fd-find"

  python:
    run:
      commands:
        - "sudo apt-get install -y pipx python3-venv python3-pip"
        - "python3 -m pipx ensurepath"
        - "pip install pynvim"

  aws:
    run:
      commands:
        install:
          - 'curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"'
          - "unzip /tmp/awscliv2.zip -d /tmp/"
          - "sudo /tmp/aws/install"
          - "rm /tmp/awscliv2.zip"
          - "rm -rf /tmp/aws"
          - "pipx install aws-sso-util"
        update:
          - 'curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"'
          - "unzip /tmp/awscliv2.zip -d /tmp/"
          - "sudo /tmp/aws/install --update"
          - "rm /tmp/awscliv2.zip"
          - "rm -rf /tmp/aws"

  php:
    run:
      commands:
        - "sudo add-apt-repository ppa:ondrej/php -y"
        - "sudo apt-get update && sudo apt-get upgrade -y"
        - "sudo apt-get install php8.1-cli -y"
        - "sudo apt-get install -y php8.1-bz2 php8.1-curl php8.1-intl php8.1-xml php8.1-mbstring"

  composer:
    run:
      commands:
        - "curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php"
        - "sudo php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer"
        - "rm -rf /tmp/composer-setup.php"

  go:
    run:
      commands: "sudo apt-get install golang"

  personal_repos:
    run:
      commands: 
        install: "machine_setup install -c ./personal_repositories.yaml"
        update: "machine_setup update -c ./personal_repositories.yaml"
        uninstall: "machine_setup uninstall -c ./personal_repositories.yaml"

  no_repos:
    run:
      commands: 
        install: "machine_setup install -c ./no_repositories.yaml"
        update: "machine_setup update -c ./no_repositories.yaml"
        uninstall: "machine_setup uninstall -c ./no_repositories.yaml"
